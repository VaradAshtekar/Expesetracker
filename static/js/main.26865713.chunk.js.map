{"version":3,"sources":["Components/Header.js","context/AppReducer.js","context/GlobalState.js","Components/Balance.js","Components/IncomeExpenses.js","Components/Transaction.js","Components/TransactionList.js","Components/Addtransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","text","amount","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransactions","Balance","total","useContext","map","reduce","acc","item","toFixed","IncomeExpenses","amounts","income","expense","class","Transaction","sign","Math","abs","onClick","TransactionList","key","Addtransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","className","htmlFor","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.26865713.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <h2>\r\n            Expense Tracker\r\n        </h2>\r\n    )\r\n}\r\n","export default (state, action) => {\r\n    switch(action.type) {\r\n        case 'DELETE_TRANSACTION':\r\n        return{\r\n            ...state,\r\n            transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\r\n        }\r\n        case 'ADD_TRANSACTION':\r\n        return {\r\n            ...state,\r\n            transactions: [action.payload,...state.transactions] \r\n        }\r\n        default: \r\n           return state;\r\n    }\r\n}","import React, { createContext, useReducer } from 'react';\r\nimport AppReducer from './AppReducer';\r\n\r\nconst initialState = {\r\n    transactions: [\r\n           { id: 1, text: 'Flower', amount: -20 },\r\n           { id: 2, text: 'Salary', amount: 300 },\r\n           { id: 3, text: 'Book', amount: -10 },\r\n           { id: 4, text: 'Camera', amount: 150 }\r\n        ]        \r\n}\r\n\r\n//create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// provider componemt\r\nexport const GlobalProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n\r\n    //actions\r\n    function deleteTransaction(id) {\r\n        dispatch({\r\n            type: 'DELETE_TRANSACTION',\r\n            payload: id\r\n        })\r\n    }\r\n\r\n    //add transaction on input\r\n    function addTransactions(transaction) {\r\n        dispatch({\r\n            type: 'ADD_TRANSACTION',\r\n            payload: transaction\r\n        })\r\n    }\r\n\r\n    return (<GlobalContext.Provider value={{\r\n        transactions:state.transactions,\r\n        deleteTransaction,\r\n        addTransactions\r\n    }}>\r\n         {children}\r\n\r\n        \r\n         </GlobalContext.Provider>);\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\n\r\nexport const Balance = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h4>Your Balance</h4>\r\n            <h1 id=\"balance\">Rs.{total}</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useContext} from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const IncomeExpenses = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n  \r\n    const income = amounts\r\n      .filter(item => item > 0)\r\n      .reduce((acc, item) => (acc += item), 0)\r\n      .toFixed(2);\r\n  \r\n    const expense = (\r\n      amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) *\r\n      -1\r\n    ).toFixed(2);\r\n\r\n    return (\r\n        <div>\r\n            <div class=\"inc-exp-container\">\r\n                <div>\r\n                    <h4>Income</h4>\r\n                    <p id=\"money-plus\" class=\"money plus\">+Rs{income}</p>\r\n                </div>\r\n                <div>\r\n                    <h4>Expense</h4>\r\n                    <p id=\"money-minus\" class=\"money minus\">-Rs.{expense}</p>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\n\r\nexport const Transaction = ({transaction}) => {\r\n    const { deleteTransaction } = useContext(GlobalContext);\r\n    const sign = transaction.amount < 0 ? '-' : '+';\r\n\r\n    return (\r\n        <li class={transaction.amount < 0 ? 'minus' : 'plus'}>\r\n              {transaction.text} <span>{sign} Rs.{Math.abs(transaction.amount)}</span><button onClick={() => deleteTransaction(transaction.id)} class=\"delete-btn\">x</button>\r\n        </li> \r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { Transaction } from './Transaction';\r\n\r\nexport const TransactionList = () => {\r\n   const { transactions } = useContext(GlobalContext);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>History</h3>\r\n            <ul id=\"list\" class=\"list\">\r\n                {transactions.map(transaction => (\r\n                 <Transaction key={transaction.id} transaction={transaction}/>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const Addtransaction = () => {\r\n    const state = useState();\r\n    const [text, setText] = useState('');\r\n    const [amount, setAmount] = useState(0)\r\n    const { addTransactions } = useContext(GlobalContext);\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const newTransaction = {\r\n            id: Math.floor(Math.random() * 100000000),\r\n            text,\r\n            amount: +amount\r\n        }\r\n        addTransactions(newTransaction);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Add new transaction</h3>\r\n            <form onSubmit={onSubmit} id=\"form\">\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"text\">Text</label>\r\n                    <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} id=\"text\" placeholder=\"Enter text...\" />\r\n                </div>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"amount\"\r\n                    >Amount <br />\r\n                     (negative - expense, positive - income)</label\r\n                    >\r\n                    <input type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} id=\"amount\" placeholder=\"Enter amount...\" />\r\n                </div>\r\n                <button className=\"btn\">Add transaction</button>\r\n            </form>\r\n        </div>\r\n\r\n    \r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Header } from './Components/Header';\nimport { Balance } from './Components/Balance';\nimport { IncomeExpenses} from './Components/IncomeExpenses';\nimport { TransactionList } from './Components/TransactionList';\nimport { Addtransaction } from './Components/Addtransaction';\nimport  { GlobalProvider } from './context/GlobalState';\n\nfunction App() {\n  return (\n    <GlobalProvider>\n        <Header />\n        <div className=\"container\">\n          <Balance />\n          <IncomeExpenses />\n          <TransactionList />\n          <Addtransaction />\n        </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}